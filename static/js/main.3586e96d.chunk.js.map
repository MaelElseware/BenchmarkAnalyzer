{"version":3,"sources":["services/firebase.js","components/ShareDialog.jsx","BenchmarkAnalyzer.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","storage","getStorage","db","getFirestore","ShareDialog","_ref","benchmarkData","onClose","isGenerating","setIsGenerating","useState","shareableLink","setShareableLink","error","setError","copied","setCopied","React","createElement","className","onClick","async","url","benchmarkId","window","location","origin","pathname","getShareableUrl","addDoc","collection","createdAt","serverTimestamp","fileName","expires","Date","now","id","dataString","JSON","stringify","storageRef","ref","uploadString","console","uploadBenchmarkData","err","message","disabled","type","value","readOnly","e","target","select","copyToClipboard","navigator","clipboard","writeText","then","setTimeout","catch","BenchmarkAnalyzer","activeTab","setActiveTab","selectedScene","setSelectedScene","evolutionData","setEvolutionData","sceneAverages","setSceneAverages","stutters","setStutters","loading","setLoading","setFileName","isSharing","setIsSharing","isLoadingShared","setIsLoadingShared","debugChartData","data","name","log","processLogContent","content","benchmarks","logContent","stutterPattern","benchmarkPattern","oldBenchmarkPattern","match","exec","push","scene","run","parseInt","samples","duration","parseFloat","mean","median","min","max","frames_below_60","percent_below_60","frames_below_45","percent_below_45","frames_below_30","percent_below_30","frames_below_15","percent_below_15","gameThreadMean","gameThreadMedian","gameThreadMin","gameThreadMax","renderThreadMean","renderThreadMedian","renderThreadMin","renderThreadMax","gpuTimeMean","gpuTimeMedian","gpuTimeMin","gpuTimeMax","length","oldMatch","stutterMatch","timestamp","fps","parseLogFile","evolution","averages","grouped","forEach","benchmark","below60","below45","below30","below15","Object","keys","sort","a","b","map","runs","totalSamples","reduce","sum","weightedMean","weightedMedian","minMeanFPS","Math","maxMeanFPS","hasThreadData","some","undefined","minGameThreadMean","maxGameThreadMean","minRenderThreadMean","maxRenderThreadMean","minGpuTimeMean","maxGpuTimeMean","Number","MAX_VALUE","meanFPS","medianFPS","minFPS","maxFPS","processBenchmarkData","loadSharedBenchmark","benchmarkRef","doc","getDoc","exists","Error","getDownloadURL","response","fetch","text","parse","getBenchmarkData","rawLogContent","toggleShareDialog","formatFPS","toFixed","useEffect","params","URLSearchParams","search","get","dropboxUrl","electronAPI","onFileOpen","event","filePath","readFile","filename","split","pop","proxyUrl","encodeURIComponent","ok","status","statusText","pathParts","URL","sampleData","getSampleData","Blockade1","Slump","timer","clearTimeout","evolutionChartData","prepareEvolutionChartData","allScenesData","[object Object]","flat","result","item","find","r","sceneData","accept","onChange","file","files","reader","FileReader","onload","onerror","readAsText","htmlFor","key","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","Legend","index","Line","stroke","style","marginBottom","BarChart","gameThread","renderThread","gpuTime","margin","top","right","left","bottom","formatter","wrapperStyle","position","marginTop","Bar","fill","labelFormatter","label","activeDot","sharedAt","toISOString","Fragment","_run$gameThreadMean","_run$renderThreadMean","_run$gpuTimeMean","_scene$gameThreadMean","_scene$renderThreadMe","_scene$gpuTimeMean","stutter","whiteSpace","wordBreak","replace","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3586e96d.chunk.js","sourcesContent":["  //Core Firebase service that handles data storage and retrieval\r\n  \r\n  import { initializeApp } from 'firebase/app';\r\n  import { getStorage, ref, uploadString, getDownloadURL } from 'firebase/storage';\r\n  import { getFirestore, collection, addDoc, doc, getDoc, serverTimestamp } from 'firebase/firestore';\r\n  \r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyCDjdaZzKUqcc_SkgzwwzWJ11BZFFjTj0Y\",\r\n    authDomain: \"unrecordbenchmark.firebaseapp.com\",\r\n    projectId: \"unrecordbenchmark\",\r\n    storageBucket: \"unrecordbenchmark.firebasestorage.app\",\r\n    messagingSenderId: \"1098192714378\",\r\n    appId: \"1:1098192714378:web:a2b365606d82f26b1bcb73\"\r\n  };\r\n  \r\n  // Initialize Firebase\r\n  const app = initializeApp(firebaseConfig);\r\n  const storage = getStorage(app);\r\n  const db = getFirestore(app);\r\n  \r\n  /**\r\n   * Uploads benchmark data and returns a shareable ID\r\n   * @param {Object} benchmarkData The benchmark data to upload\r\n   * @returns {Promise<string>} A unique ID for retrieving the data\r\n   */\r\n  export async function uploadBenchmarkData(benchmarkData) {\r\n    try {\r\n      // Create a reference to the benchmark data in Firestore\r\n      const benchmarkRef = await addDoc(collection(db, \"benchmarks\"), {\r\n        createdAt: serverTimestamp(),\r\n        fileName: benchmarkData.fileName || 'unknown',\r\n        expires: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // Expire in 30 days\r\n      });\r\n      \r\n      const benchmarkId = benchmarkRef.id;\r\n      \r\n      // Convert benchmark data to JSON string\r\n      const dataString = JSON.stringify(benchmarkData);\r\n      \r\n      // Upload the data to Firebase Storage\r\n      const storageRef = ref(storage, `benchmarks/${benchmarkId}`);\r\n      await uploadString(storageRef, dataString, 'raw');\r\n      \r\n      return benchmarkId;\r\n    } catch (error) {\r\n      console.error(\"Error uploading benchmark data:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Retrieves benchmark data by ID\r\n   * @param {string} benchmarkId The unique ID of the benchmark data\r\n   * @returns {Promise<Object>} The benchmark data\r\n   */\r\n  export async function getBenchmarkData(benchmarkId) {\r\n    try {\r\n      // Check if the benchmark exists in Firestore\r\n      const benchmarkRef = doc(db, \"benchmarks\", benchmarkId);\r\n      const docSnap = await getDoc(benchmarkRef);\r\n      \r\n      if (!docSnap.exists()) {\r\n        throw new Error(\"Benchmark data not found or has expired\");\r\n      }\r\n      \r\n      // Get the data from Firebase Storage\r\n      const storageRef = ref(storage, `benchmarks/${benchmarkId}`);\r\n      const url = await getDownloadURL(storageRef);\r\n      \r\n      // Fetch the data\r\n      const response = await fetch(url);\r\n      const dataString = await response.text();\r\n      \r\n      // Parse and return the data\r\n      return JSON.parse(dataString);\r\n    } catch (error) {\r\n      console.error(\"Error retrieving benchmark data:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Generates a shareable URL for the benchmark data\r\n   * @param {string} benchmarkId The unique ID of the benchmark data\r\n   * @returns {string} A URL that can be shared with others\r\n   */\r\n  export function getShareableUrl(benchmarkId) {\r\n    return `${window.location.origin}${window.location.pathname}?benchmark=${benchmarkId}`;\r\n  }","// Dialog for sharing benchmark results from within the analyzer\r\n\r\nimport React, { useState } from 'react';\r\nimport { uploadBenchmarkData, getShareableUrl } from '../services/firebase';\r\nimport './ShareDialog.css';\r\n\r\nconst ShareDialog = ({ benchmarkData, onClose }) => {\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [shareableLink, setShareableLink] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  // Generate shareable link\r\n  const generateLink = async () => {\r\n    setIsGenerating(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // Upload the data to Firebase\r\n      const benchmarkId = await uploadBenchmarkData(benchmarkData);\r\n      \r\n      // Generate shareable URL\r\n      const url = getShareableUrl(benchmarkId);\r\n      setShareableLink(url);\r\n    } catch (err) {\r\n      console.error(\"Error generating link:\", err);\r\n      setError(`Failed to generate link: ${err.message}`);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  // Copy link to clipboard\r\n  const copyToClipboard = () => {\r\n    navigator.clipboard.writeText(shareableLink)\r\n      .then(() => {\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000);\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Could not copy text: \", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"share-dialog-overlay\">\r\n      <div className=\"share-dialog\">\r\n        <div className=\"share-dialog-header\">\r\n          <h2>Share Benchmark Results</h2>\r\n          <button className=\"close-button\" onClick={onClose}>&times;</button>\r\n        </div>\r\n        \r\n        <div className=\"share-dialog-content\">\r\n          <p>\r\n            Generate a shareable link for your benchmark results. \r\n            This link will be valid for 30 days.\r\n          </p>\r\n          \r\n          {!shareableLink && (\r\n            <button \r\n              className=\"generate-button\" \r\n              onClick={generateLink} \r\n              disabled={isGenerating}\r\n            >\r\n              {isGenerating ? 'Generating...' : 'Generate Shareable Link'}\r\n            </button>\r\n          )}\r\n          \r\n          {shareableLink && (\r\n            <div className=\"share-link-container\">\r\n              <input \r\n                type=\"text\" \r\n                value={shareableLink} \r\n                readOnly \r\n                className=\"share-link-input\" \r\n                onClick={e => e.target.select()}\r\n              />\r\n              <button \r\n                className=\"copy-button\" \r\n                onClick={copyToClipboard}\r\n              >\r\n                {copied ? 'Copied!' : 'Copy'}\r\n              </button>\r\n            </div>\r\n          )}\r\n          \r\n          {error && (\r\n            <div className=\"error-message\">{error}</div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShareDialog;","// 1. use the cd\r\n// 2. npm run deploy to send to githubpage\r\n// 2.1 or npm start to go for a local serv version\r\n// 2.2 build as an electron app : npx electron-builder build\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport './BenchmarkAnalyzer.css';\r\nimport { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport ShareDialog from './components/ShareDialog';\r\nimport { getBenchmarkData } from './services/firebase';\r\n\r\nconst BenchmarkAnalyzer = () => {\r\n  // State for application\r\n  const [activeTab, setActiveTab] = useState('evolution');\r\n  const [selectedScene, setSelectedScene] = useState('all');\r\n  const [evolutionData, setEvolutionData] = useState({});\r\n  const [sceneAverages, setSceneAverages] = useState([]);\r\n  const [stutters, setStutters] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [fileName, setFileName] = useState('');\r\n  const [isSharing, setIsSharing] = useState(false);\r\n  const [isLoadingShared, setIsLoadingShared] = useState(false);\r\n\r\n  // Debug utility to log chart data\r\n  const debugChartData = (data, name) => {\r\n    console.log(`Chart data for ${name}:`, data);\r\n    return data;\r\n  };\r\n  \r\n  // Function to parse log file\r\n  const parseLogFile = (logContent) => {\r\n    const benchmarks = [];\r\n    const stutterPattern = /\\[(.+?)\\] !!! STUTTER !!! ([\\d.]+) FPS/g;\r\n    const benchmarkPattern = /\\[(.+?)\\] (.+?)_(\\d+) - Samples: (\\d+), Duration: ([\\d.]+)s\\s+=== FPS STATISTICS ===\\s+Mean: ([\\d.]+), Median: ([\\d.]+), Min: ([\\d.]+), Max: ([\\d.]+)\\s+Frames < 60 FPS: (\\d+) \\(([\\d.]+)%\\)\\s+Frames < 45 FPS: (\\d+) \\(([\\d.]+)%\\)\\s+Frames < 30 FPS: (\\d+) \\(([\\d.]+)%\\)\\s+Frames < 15 FPS: (\\d+) \\(([\\d.]+)%\\)\\s+=== GAME THREAD \\(ms\\) ===\\s+Mean: ([\\d.]+), Median: ([\\d.]+), Min: ([\\d.]+), Max: ([\\d.]+)\\s+=== RENDER THREAD \\(ms\\) ===\\s+Mean: ([\\d.]+), Median: ([\\d.]+), Min: ([\\d.]+), Max: ([\\d.]+)\\s+=== GPU TIME \\(ms\\) ===\\s+Mean: ([\\d.]+), Median: ([\\d.]+), Min: ([\\d.]+), Max: ([\\d.]+)/g;\r\n    \r\n    // Fallback to old pattern if the new one doesn't match\r\n    const oldBenchmarkPattern = /\\[.+?\\] (.+?)_(\\d+) - Samples: (\\d+), Duration: ([\\d.]+)s\\s+MEAN: ([\\d.]+)\\s+Median: ([\\d.]+), Min: ([\\d.]+), Max: ([\\d.]+)\\s+Frames < 60 FPS: (\\d+) \\(([\\d.]+)%\\)\\s+Frames < 45 FPS: (\\d+) \\(([\\d.]+)%\\)\\s+Frames < 30 FPS: (\\d+) \\(([\\d.]+)%\\)\\s+Frames < 15 FPS: (\\d+) \\(([\\d.]+)%\\)/g;\r\n    \r\n    let match;\r\n    // Try the new pattern first\r\n    while ((match = benchmarkPattern.exec(logContent)) !== null) {\r\n      benchmarks.push({\r\n        scene: match[2],\r\n        run: parseInt(match[3]),\r\n        samples: parseInt(match[4]),\r\n        duration: parseFloat(match[5]),\r\n        mean: parseFloat(match[6]),\r\n        median: parseFloat(match[7]),\r\n        min: parseFloat(match[8]),\r\n        max: parseFloat(match[9]),\r\n        frames_below_60: parseInt(match[10]),\r\n        percent_below_60: parseFloat(match[11]),\r\n        frames_below_45: parseInt(match[12]),\r\n        percent_below_45: parseFloat(match[13]),\r\n        frames_below_30: parseInt(match[14]),\r\n        percent_below_30: parseFloat(match[15]),\r\n        frames_below_15: parseInt(match[16]),\r\n        percent_below_15: parseFloat(match[17]),\r\n        gameThreadMean: parseFloat(match[18]),    // Note the camelCase property names\r\n        gameThreadMedian: parseFloat(match[19]), \r\n        gameThreadMin: parseFloat(match[20]),\r\n        gameThreadMax: parseFloat(match[21]),\r\n        renderThreadMean: parseFloat(match[22]),\r\n        renderThreadMedian: parseFloat(match[23]),\r\n        renderThreadMin: parseFloat(match[24]),\r\n        renderThreadMax: parseFloat(match[25]),\r\n        gpuTimeMean: parseFloat(match[26]),\r\n        gpuTimeMedian: parseFloat(match[27]),\r\n        gpuTimeMin: parseFloat(match[28]),\r\n        gpuTimeMax: parseFloat(match[29])\r\n      });\r\n    }\r\n    \r\n    // If no benchmarks found, try the old pattern\r\n    if (benchmarks.length === 0) {\r\n      let oldMatch;\r\n      while ((oldMatch = oldBenchmarkPattern.exec(logContent)) !== null) {\r\n        benchmarks.push({\r\n          scene: oldMatch[1],\r\n          run: parseInt(oldMatch[2]),\r\n          samples: parseInt(oldMatch[3]),\r\n          duration: parseFloat(oldMatch[4]),\r\n          mean: parseFloat(oldMatch[5]),\r\n          median: parseFloat(oldMatch[6]),\r\n          min: parseFloat(oldMatch[7]),\r\n          max: parseFloat(oldMatch[8]),\r\n          frames_below_60: parseInt(oldMatch[9]),\r\n          percent_below_60: parseFloat(oldMatch[10]),\r\n          frames_below_45: parseInt(oldMatch[11]),\r\n          percent_below_45: parseFloat(oldMatch[12]),\r\n          frames_below_30: parseInt(oldMatch[13]),\r\n          percent_below_30: parseFloat(oldMatch[14]),\r\n          frames_below_15: parseInt(oldMatch[15]),\r\n          percent_below_15: parseFloat(oldMatch[16])\r\n        });\r\n      }\r\n    }\r\n    \r\n    const stutters = [];\r\n    let stutterMatch;\r\n    while ((stutterMatch = stutterPattern.exec(logContent)) !== null) {\r\n      stutters.push({\r\n        timestamp: stutterMatch[1],\r\n        fps: parseFloat(stutterMatch[2])\r\n      });\r\n    }\r\n    \r\n    return { benchmarks, stutters };\r\n  };\r\n  \r\n  // Process benchmark data into the format needed for visualization\r\n  const processBenchmarkData = (benchmarks) => {\r\n    // Group benchmarks by scene and then by run\r\n    const grouped = {};\r\n    \r\n    // Group by scene first\r\n    benchmarks.forEach(benchmark => {\r\n      if (!grouped[benchmark.scene]) {\r\n        grouped[benchmark.scene] = [];\r\n      }\r\n      \r\n      grouped[benchmark.scene].push({\r\n        run: benchmark.run,\r\n        mean: benchmark.mean,\r\n        median: benchmark.median,\r\n        min: benchmark.min,\r\n        max: benchmark.max,\r\n        below60: benchmark.percent_below_60,\r\n        below45: benchmark.percent_below_45,\r\n        below30: benchmark.percent_below_30,\r\n        below15: benchmark.percent_below_15,\r\n        samples: benchmark.samples,\r\n        gameThreadMean: benchmark.gameThreadMean,\r\n        gameThreadMedian: benchmark.gameThreadMedian,\r\n        gameThreadMin: benchmark.gameThreadMin,\r\n        gameThreadMax: benchmark.gameThreadMax,\r\n        renderThreadMean: benchmark.renderThreadMean,\r\n        renderThreadMedian: benchmark.renderThreadMedian,\r\n        renderThreadMin: benchmark.renderThreadMin,\r\n        renderThreadMax: benchmark.renderThreadMax,\r\n        gpuTimeMean: benchmark.gpuTimeMean,\r\n        gpuTimeMedian: benchmark.gpuTimeMedian,\r\n        gpuTimeMin: benchmark.gpuTimeMin,\r\n        gpuTimeMax: benchmark.gpuTimeMax\r\n      });\r\n    });\r\n    \r\n    // Sort runs within each scene\r\n    Object.keys(grouped).forEach(scene => {\r\n      grouped[scene].sort((a, b) => a.run - b.run);\r\n    });\r\n    \r\n    // Calculate proper averages for each scene (across all runs)\r\n    const averages = Object.keys(grouped).map(scene => {\r\n      const runs = grouped[scene];\r\n      const totalSamples = runs.reduce((sum, run) => sum + (run.samples || 1), 0);\r\n      \r\n      // Weight means and medians by sample count for more accurate averaging\r\n      const weightedMean = runs.reduce((sum, run) => sum + (run.mean * (run.samples || 1)), 0) / totalSamples;\r\n      const weightedMedian = runs.reduce((sum, run) => sum + (run.median * (run.samples || 1)), 0) / totalSamples;\r\n      \r\n      // Find min and max of the mean FPS values across runs\r\n      const minMeanFPS = Math.min(...runs.map(run => run.mean));\r\n      const maxMeanFPS = Math.max(...runs.map(run => run.mean));\r\n      \r\n      // Calculate thread time and GPU time averages\r\n      const hasThreadData = runs.some(run => run.gameThreadMean !== undefined);\r\n      \r\n      let gameThreadMean = 0;\r\n      let minGameThreadMean = 0;\r\n      let maxGameThreadMean = 0;\r\n      let renderThreadMean = 0;\r\n      let minRenderThreadMean = 0;\r\n      let maxRenderThreadMean = 0;\r\n      let gpuTimeMean = 0;\r\n      let minGpuTimeMean = 0;\r\n      let maxGpuTimeMean = 0;\r\n      \r\n      if (hasThreadData) {\r\n        // Calculate weighted average for thread times\r\n        gameThreadMean = runs.reduce((sum, run) => sum + ((run.gameThreadMean || 0) * (run.samples || 1)), 0) / totalSamples;\r\n        minGameThreadMean = Math.min(...runs.map(run => run.gameThreadMean || Number.MAX_VALUE));\r\n        maxGameThreadMean = Math.max(...runs.map(run => run.gameThreadMean || 0));\r\n        \r\n        renderThreadMean = runs.reduce((sum, run) => sum + ((run.renderThreadMean || 0) * (run.samples || 1)), 0) / totalSamples;\r\n        minRenderThreadMean = Math.min(...runs.map(run => run.renderThreadMean || Number.MAX_VALUE));\r\n        maxRenderThreadMean = Math.max(...runs.map(run => run.renderThreadMean || 0));\r\n        \r\n        gpuTimeMean = runs.reduce((sum, run) => sum + ((run.gpuTimeMean || 0) * (run.samples || 1)), 0) / totalSamples;\r\n        minGpuTimeMean = Math.min(...runs.map(run => run.gpuTimeMean || Number.MAX_VALUE));\r\n        maxGpuTimeMean = Math.max(...runs.map(run => run.gpuTimeMean || 0));\r\n      }\r\n      \r\n      return {\r\n        name: scene,\r\n        meanFPS: weightedMean,\r\n        medianFPS: weightedMedian,\r\n        minFPS: Math.min(...runs.map(run => run.min)),\r\n        maxFPS: Math.max(...runs.map(run => run.max)),\r\n        minMeanFPS: minMeanFPS,\r\n        maxMeanFPS: maxMeanFPS,\r\n        gameThreadMean: gameThreadMean,\r\n        minGameThreadMean: minGameThreadMean === Number.MAX_VALUE ? 0 : minGameThreadMean,\r\n        maxGameThreadMean: maxGameThreadMean,\r\n        renderThreadMean: renderThreadMean,\r\n        minRenderThreadMean: minRenderThreadMean === Number.MAX_VALUE ? 0 : minRenderThreadMean,\r\n        maxRenderThreadMean: maxRenderThreadMean,\r\n        gpuTimeMean: gpuTimeMean,\r\n        minGpuTimeMean: minGpuTimeMean === Number.MAX_VALUE ? 0 : minGpuTimeMean,\r\n        maxGpuTimeMean: maxGpuTimeMean,\r\n        below60: runs.reduce((sum, run) => sum + (run.below60 * (run.samples || 1)), 0) / totalSamples,\r\n        below45: runs.reduce((sum, run) => sum + (run.below45 * (run.samples || 1)), 0) / totalSamples,\r\n        below30: runs.reduce((sum, run) => sum + (run.below30 * (run.samples || 1)), 0) / totalSamples,\r\n        below15: runs.reduce((sum, run) => sum + (run.below15 * (run.samples || 1)), 0) / totalSamples,\r\n        totalSamples: totalSamples,\r\n        hasThreadData: hasThreadData\r\n      };\r\n    });\r\n    \r\n    return { evolution: grouped, averages };\r\n  };\r\n  \r\n  // Handle file upload\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n    \r\n    setLoading(true);\r\n    setError('');\r\n    setFileName(file.name);\r\n    \r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      try {\r\n        const content = e.target.result;\r\n        processLogContent(content, file.name);\r\n      } catch (err) {\r\n        console.error('Error processing file:', err);\r\n        setError('Error processing the file. Make sure it has the correct format.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    reader.onerror = () => {\r\n      setError('Error reading the file. Please try again.');\r\n      setLoading(false);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n  \r\n  const processLogContent = (content, fileName) => {\r\n    try {\r\n      const { benchmarks, stutters } = parseLogFile(content);\r\n      \r\n      if (benchmarks.length === 0) {\r\n        setError('No benchmark data found in the file. Make sure it has the correct format.');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      const { evolution, averages } = processBenchmarkData(benchmarks);\r\n      setEvolutionData(evolution);\r\n      setSceneAverages(averages);\r\n      setStutters(stutters);\r\n      setFileName(fileName);\r\n      \r\n      // Set default selected scene\r\n      if (Object.keys(evolution).length > 0) {\r\n        setSelectedScene('all');\r\n      }\r\n      \r\n      setLoading(false);\r\n      setIsLoadingShared(false);\r\n    } catch (err) {\r\n      console.error('Error processing content:', err);\r\n      setError('Error processing the data. Make sure it has the correct format.');\r\n      setLoading(false);\r\n      setIsLoadingShared(false);\r\n    }\r\n  };\r\n  \r\n  // Function to download and process file from Google Drive \r\n  // ?driveFile=1svUDM0W0A19Us7UwNtIhtrA_dhzp6M2d\r\n  // ?driveUrl=https://drive.google.com/file/d/1svUDM0W0A19Us7UwNtIhtrA_dhzp6M2d\r\n  // -> https://maelelseware.github.io/BenchmarkAnalyzer/?driveFile=1svUDM0W0A19Us7UwNtIhtrA_dhzp6M2d\r\n  const loadFromGoogleDrive = async (fileId) => {\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // Use your own proxy function\r\n      const proxyUrl = `/.netlify/functions/drive-proxy?id=${fileId}`;\r\n      \r\n      // Fetch the file\r\n      const response = await fetch(proxyUrl);\r\n      \r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to download file: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const content = await response.text();\r\n      \r\n      // Debug: Log the first 500 characters to see what we're getting\r\n      console.log(\"Received content (first 500 chars):\", content.substring(0, 500));\r\n      \r\n      // Check if it looks like HTML instead of a log file\r\n      if (content.includes('<html') || content.includes('<!DOCTYPE')) {\r\n        console.error(\"Received HTML instead of raw file content\");\r\n        setError(\"Received HTML from Google Drive instead of the raw file. The file might need authentication or be too large.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      processLogContent(content, `Drive File ${fileId}`);\r\n    } catch (err) {\r\n      console.error('Error loading file from Drive:', err);\r\n      setError(`Error loading file: ${err.message}`);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadFromDropbox = async (dropboxUrl) => {\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      // Convert to direct download link\r\n      const directDownloadUrl = dropboxUrl.replace('dl=0', 'dl=1');\r\n      \r\n      // Fetch the file\r\n      const response = await fetch(directDownloadUrl);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Failed to download file: ${response.status} ${response.statusText}`);\r\n      }\r\n      \r\n      const content = await response.text();\r\n      \r\n      // Check if we got HTML instead of the file content\r\n      if (content.includes('<html') || content.includes('<!DOCTYPE')) {\r\n        console.error(\"Received HTML instead of raw file content\");\r\n        setError(\"Received HTML from Dropbox instead of the raw file.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Get the filename from the URL\r\n      const urlObj = new URL(dropboxUrl);\r\n      const pathParts = urlObj.pathname.split('/');\r\n      const fileName = pathParts[pathParts.length - 1].split('?')[0];\r\n      \r\n      processLogContent(content, fileName);\r\n    } catch (err) {\r\n      console.error('Error loading file from Dropbox:', err);\r\n      setError(`Error loading file: ${err.message}`);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  function extractGoogleDriveFileId(url) {\r\n    // Handle multiple Google Drive URL formats\r\n    const patterns = [\r\n      /\\/file\\/d\\/([a-zA-Z0-9_-]+)/,       // /file/d/{fileId}/\r\n      /id=([a-zA-Z0-9_-]+)/,               // id={fileId}\r\n      /\\/open\\?id=([a-zA-Z0-9_-]+)/        // /open?id={fileId}\r\n    ];\r\n    \r\n    for (const pattern of patterns) {\r\n      const match = url.match(pattern);\r\n      if (match && match[1]) {\r\n        return match[1];\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  // Handle loading shared benchmark from URL\r\n  const loadSharedBenchmark = async (benchmarkId) => {\r\n    setIsLoadingShared(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const data = await getBenchmarkData(benchmarkId);\r\n      \r\n      if (data.rawLogContent) {\r\n        // Process the raw log content\r\n        processLogContent(data.rawLogContent, data.fileName || 'Shared Benchmark');\r\n      } else if (data.evolutionData && data.sceneAverages) {\r\n        // Directly use processed data if available\r\n        setEvolutionData(data.evolutionData);\r\n        setSceneAverages(data.sceneAverages);\r\n        setStutters(data.stutters || []);\r\n        setFileName(data.fileName || 'Shared Benchmark');\r\n        setSelectedScene('all');\r\n        setLoading(false);\r\n        setIsLoadingShared(false);\r\n      } else {\r\n        throw new Error('Invalid benchmark data format');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading shared benchmark:', err);\r\n      setError(`Failed to load shared benchmark: ${err.message}`);\r\n      setIsLoadingShared(false);\r\n    }\r\n  };\r\n  \r\n  // Prepare data for sharing\r\n  const prepareBenchmarkDataForSharing = () => {\r\n    return {\r\n      evolutionData,\r\n      sceneAverages,\r\n      stutters,\r\n      fileName,\r\n      sharedAt: new Date().toISOString(),\r\n    };\r\n  };\r\n  \r\n  // Toggle share dialog\r\n  const toggleShareDialog = () => {\r\n    setIsSharing(!isSharing);\r\n  };\r\n\r\n  // Sample data function for demonstration purposes\r\n  const getSampleData = () => {\r\n    // Sample evolution data structure\r\n    const evolution = {\r\n      \"Blockade1\": [\r\n        { \r\n          run: 0, \r\n          mean: 65.13, \r\n          median: 64.53, \r\n          min: 14.13, \r\n          max: 100.62, \r\n          below60: 29.2, \r\n          below45: 3.8, \r\n          below30: 1.7, \r\n          below15: 0.2, \r\n          samples: 895,\r\n          gameThreadMean: 11.90,\r\n          gameThreadMedian: 11.44,\r\n          gameThreadMin: 8.28,\r\n          gameThreadMax: 23.70,\r\n          renderThreadMean: 5.20,\r\n          renderThreadMedian: 4.82,\r\n          renderThreadMin: 3.68,\r\n          renderThreadMax: 40.06,\r\n          gpuTimeMean: 14.12,\r\n          gpuTimeMedian: 13.85,\r\n          gpuTimeMin: 10.05,\r\n          gpuTimeMax: 32.24\r\n        },\r\n        { \r\n          run: 1, \r\n          mean: 51.48, \r\n          median: 51.91, \r\n          min: 12.03, \r\n          max: 62.07, \r\n          below60: 99.0, \r\n          below45: 6.3, \r\n          below30: 0.4, \r\n          below15: 0.4, \r\n          samples: 735,\r\n          gameThreadMean: 12.80,\r\n          gameThreadMedian: 12.10,\r\n          gameThreadMin: 8.50,\r\n          gameThreadMax: 25.30,\r\n          renderThreadMean: 5.60,\r\n          renderThreadMedian: 5.12,\r\n          renderThreadMin: 3.95,\r\n          renderThreadMax: 42.15,\r\n          gpuTimeMean: 15.20,\r\n          gpuTimeMedian: 14.75,\r\n          gpuTimeMin: 10.85,\r\n          gpuTimeMax: 34.50\r\n        }\r\n      ],\r\n      \"Slump\": [\r\n        { \r\n          run: 0, \r\n          mean: 77.79, \r\n          median: 80.49, \r\n          min: 17.24, \r\n          max: 114.48, \r\n          below60: 9.3, \r\n          below45: 2.1, \r\n          below30: 0.8, \r\n          below15: 0.0, \r\n          samples: 1077,\r\n          gameThreadMean: 8.66,\r\n          gameThreadMedian: 8.62,\r\n          gameThreadMin: 6.86,\r\n          gameThreadMax: 15.63,\r\n          renderThreadMean: 4.37,\r\n          renderThreadMedian: 4.12,\r\n          renderThreadMin: 3.67,\r\n          renderThreadMax: 15.84,\r\n          gpuTimeMean: 11.80,\r\n          gpuTimeMedian: 11.06,\r\n          gpuTimeMin: 8.87,\r\n          gpuTimeMax: 38.35\r\n        },\r\n        { \r\n          run: 1, \r\n          mean: 54.27, \r\n          median: 54.27, \r\n          min: 13.62, \r\n          max: 62.18, \r\n          below60: 98.0, \r\n          below45: 0.6, \r\n          below30: 0.1, \r\n          below15: 0.1, \r\n          samples: 783,\r\n          gameThreadMean: 9.20,\r\n          gameThreadMedian: 9.05,\r\n          gameThreadMin: 7.12,\r\n          gameThreadMax: 17.25,\r\n          renderThreadMean: 4.75,\r\n          renderThreadMedian: 4.45,\r\n          renderThreadMin: 3.80,\r\n          renderThreadMax: 16.75,\r\n          gpuTimeMean: 12.50,\r\n          gpuTimeMedian: 11.85,\r\n          gpuTimeMin: 9.10,\r\n          gpuTimeMax: 40.20\r\n        }\r\n      ]\r\n    };\r\n\r\n    // Calculate averages based on our sample data\r\n    const averages = Object.keys(evolution).map(scene => {\r\n      const runs = evolution[scene];\r\n      const totalSamples = runs.reduce((sum, run) => sum + run.samples, 0);\r\n      \r\n      const weightedMean = runs.reduce((sum, run) => sum + (run.mean * run.samples), 0) / totalSamples;\r\n      const weightedMedian = runs.reduce((sum, run) => sum + (run.median * run.samples), 0) / totalSamples;\r\n      \r\n      // Find min and max of the mean FPS values across runs\r\n      const minMeanFPS = Math.min(...runs.map(run => run.mean));\r\n      const maxMeanFPS = Math.max(...runs.map(run => run.mean));\r\n      \r\n      // Calculate thread time and GPU time averages\r\n      const gameThreadMean = runs.reduce((sum, run) => sum + (run.gameThreadMean * run.samples), 0) / totalSamples;\r\n      const minGameThreadMean = Math.min(...runs.map(run => run.gameThreadMean));\r\n      const maxGameThreadMean = Math.max(...runs.map(run => run.gameThreadMean));\r\n      \r\n      const renderThreadMean = runs.reduce((sum, run) => sum + (run.renderThreadMean * run.samples), 0) / totalSamples;\r\n      const minRenderThreadMean = Math.min(...runs.map(run => run.renderThreadMean));\r\n      const maxRenderThreadMean = Math.max(...runs.map(run => run.renderThreadMean));\r\n      \r\n      const gpuTimeMean = runs.reduce((sum, run) => sum + (run.gpuTimeMean * run.samples), 0) / totalSamples;\r\n      const minGpuTimeMean = Math.min(...runs.map(run => run.gpuTimeMean));\r\n      const maxGpuTimeMean = Math.max(...runs.map(run => run.gpuTimeMean));\r\n      \r\n      return {\r\n        name: scene,\r\n        meanFPS: weightedMean,\r\n        medianFPS: weightedMedian,\r\n        minFPS: Math.min(...runs.map(run => run.min)),\r\n        maxFPS: Math.max(...runs.map(run => run.max)),\r\n        minMeanFPS: minMeanFPS,\r\n        maxMeanFPS: maxMeanFPS,\r\n        gameThreadMean: gameThreadMean,\r\n        minGameThreadMean: minGameThreadMean,\r\n        maxGameThreadMean: maxGameThreadMean,\r\n        renderThreadMean: renderThreadMean,\r\n        minRenderThreadMean: minRenderThreadMean,\r\n        maxRenderThreadMean: maxRenderThreadMean,\r\n        gpuTimeMean: gpuTimeMean,\r\n        minGpuTimeMean: minGpuTimeMean,\r\n        maxGpuTimeMean: maxGpuTimeMean,\r\n        below60: runs.reduce((sum, run) => sum + (run.below60 * run.samples), 0) / totalSamples,\r\n        below45: runs.reduce((sum, run) => sum + (run.below45 * run.samples), 0) / totalSamples,\r\n        below30: runs.reduce((sum, run) => sum + (run.below30 * run.samples), 0) / totalSamples,\r\n        below15: runs.reduce((sum, run) => sum + (run.below15 * run.samples), 0) / totalSamples,\r\n        totalSamples: totalSamples,\r\n        hasThreadData: true\r\n      };\r\n    });\r\n    \r\n    // Sample stutter events\r\n    const stutters = [\r\n      { timestamp: \"2025-03-10 18:32:15\", fps: 9.91 },\r\n      { timestamp: \"2025-03-10 18:32:31\", fps: 9.61 },\r\n      { timestamp: \"2025-03-10 18:33:51\", fps: 9.65 }\r\n    ];\r\n    \r\n    return { evolution, averages, stutters };\r\n  };\r\n\r\n  // Function to format FPS with color\r\n  const formatFPS = (fps) => {\r\n    if (fps >= 60) {\r\n      return <span className=\"good-fps\">{fps.toFixed(2)}</span>;\r\n    } else if (fps >= 45) {\r\n      return <span className=\"average-fps\">{fps.toFixed(2)}</span>;\r\n    } else if (fps >= 30) {\r\n      return <span className=\"poor-fps\">{fps.toFixed(2)}</span>;\r\n    } else {\r\n      return <span className=\"bad-fps\">{fps.toFixed(2)}</span>;\r\n    }\r\n  };\r\n    // Prepare data for evolution chart\r\n    const prepareEvolutionChartData = () => {\r\n      if (!evolutionData || Object.keys(evolutionData).length === 0) {\r\n        return [];\r\n      }\r\n      \r\n      if (selectedScene === 'all') {\r\n        // Return data for all scenes\r\n        const allScenesData = Object.keys(evolutionData).map(scene => {\r\n          return evolutionData[scene].map(run => ({\r\n            run: `Run ${run.run}`,\r\n            [scene]: run.mean\r\n          }));\r\n        }).flat().reduce((result, item) => {\r\n          const existingItem = result.find(r => r.run === item.run);\r\n          if (existingItem) {\r\n            return result.map(r => r.run === item.run ? { ...r, ...item } : r);\r\n          }\r\n          return [...result, item];\r\n        }, []).sort((a, b) => {\r\n          const runA = parseInt(a.run.split(' ')[1]);\r\n          const runB = parseInt(b.run.split(' ')[1]);\r\n          return runA - runB;\r\n        });\r\n        \r\n        console.log(\"All Scenes Data:\", allScenesData);\r\n        return allScenesData;\r\n      } else {\r\n        // Return data just for the selected scene\r\n        const sceneData = evolutionData[selectedScene] ? evolutionData[selectedScene].map(run => ({\r\n          run: `Run ${run.run}`,\r\n          mean: run.mean,\r\n          median: run.median,\r\n          min: run.min,\r\n          max: run.max\r\n        })) : [];\r\n        \r\n        console.log(\"Scene Data for\", selectedScene, \":\", sceneData);\r\n        return sceneData;\r\n      }\r\n    };\r\n    \r\n    // Prepare data for thread time comparison chart when all scenes are selected\r\n    const prepareThreadComparisonData = () => {\r\n      if (!sceneAverages || sceneAverages.length === 0 || !sceneAverages[0].hasThreadData) {\r\n        return [];\r\n      }\r\n      \r\n      return sceneAverages.map(scene => ({\r\n        name: scene.name,\r\n        gameThread: scene.gameThreadMean || 0,\r\n        renderThread: scene.renderThreadMean || 0, \r\n        gpuTime: scene.gpuTimeMean || 0\r\n      }));\r\n    };\r\n      \r\n    // Load sample data on mount\r\n    useEffect(() => {\r\n      const params = new URLSearchParams(window.location.search);\r\n      const benchmarkId = params.get('benchmark');\r\n     \r\n      // Check URL parameters on load\r\n      const dropboxUrl = params.get('dropboxUrl');\r\n\r\n      // Check for Electron environment\r\n      if (window.electronAPI) {\r\n        // Listen for file open events from main process\r\n        window.electronAPI.onFileOpen((event, filePath) => {\r\n          const content = window.electronAPI.readFile(filePath);\r\n          \r\n          // Get filename without path\r\n          const filename = filePath.split(/[\\\\/]/).pop();\r\n          \r\n          // Process the file content\r\n          processLogContent(content, filename);\r\n        });\r\n      }\r\n        \r\n      if (dropboxUrl) {\r\n        setLoading(true);\r\n        setError('');\r\n        \r\n        // Use your Netlify function as a proxy\r\n        const proxyUrl = `/.netlify/functions/dropbox-proxy?url=${encodeURIComponent(dropboxUrl)}`;\r\n        \r\n        fetch(proxyUrl)\r\n          .then(response => {\r\n            if (!response.ok) {\r\n              throw new Error(`Failed to download file: ${response.status} ${response.statusText}`);\r\n            }\r\n            return response.text();\r\n          })\r\n          .then(content => {\r\n            // Extract filename from the URL\r\n            const urlObj = new URL(dropboxUrl);\r\n            const pathParts = urlObj.pathname.split('/');\r\n            const fileName = pathParts[pathParts.length - 1];\r\n            \r\n            processLogContent(content, fileName || 'Dropbox File');\r\n          })\r\n          .catch(err => {\r\n            console.error('Error loading file:', err);\r\n            setError(`Error loading file: ${err.message}`);\r\n            setLoading(false);\r\n          });\r\n      } else {\r\n        if (benchmarkId) {\r\n          // Load the shared benchmark\r\n          loadSharedBenchmark(benchmarkId);\r\n        } else {\r\n          // Load sample data for demonstration if no benchmark is specified\r\n          const sampleData = getSampleData();\r\n          setEvolutionData(sampleData.evolution);\r\n          setSceneAverages(sampleData.averages);\r\n          setStutters(sampleData.stutters);\r\n          setFileName('Sample Data (Demo)');\r\n        }\r\n      }\r\n      \r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      // Force re-render of charts after component has mounted\r\n      if (Object.keys(evolutionData).length > 0) {\r\n        const timer = setTimeout(() => {\r\n          // Force a slight state change to trigger re-render\r\n          setEvolutionData({...evolutionData});\r\n        }, 100);\r\n        return () => clearTimeout(timer);\r\n      }\r\n    }, [evolutionData]);\r\n    \r\n    const evolutionChartData = prepareEvolutionChartData();\r\n  \r\n    if (loading || isLoadingShared) {\r\n      return (\r\n        <div className=\"benchmark-container\">\r\n          <div className=\"loading\">Loading benchmark data...</div>\r\n        </div>\r\n      );\r\n    }\r\n  \r\n  return (\r\n    <div className=\"benchmark-container\">\r\n      <h1 className=\"title\">Benchmark Performance Analyzer</h1>\r\n      \r\n      {/* File Upload */}\r\n      <div className=\"section\">\r\n        <h2 className=\"subtitle\">Load Benchmark Data</h2>\r\n        \r\n        <div className=\"controls-row\">\r\n          <div>\r\n            <label className=\"upload-button\">\r\n              Upload Log File\r\n              <input \r\n                type=\"file\" \r\n                accept=\".log,.txt\" \r\n                className=\"hidden\" \r\n                onChange={handleFileUpload} \r\n              />\r\n            </label>\r\n            <span className=\"filename\">\r\n              {fileName ? `Current file: ${fileName}` : 'No file selected'}\r\n            </span>\r\n          </div>\r\n\r\n          {/* Share Button */}\r\n          {Object.keys(evolutionData).length > 0 && (\r\n          <button \r\n            className=\"share-button\" \r\n            onClick={toggleShareDialog}\r\n          >\r\n            Share Results\r\n          </button>\r\n          )}\r\n        </div>\r\n        \r\n        {error && (\r\n          <div className=\"error-message\">{error}</div>\r\n        )}\r\n      </div>\r\n      \r\n      {/* Tab Navigation */}\r\n      <div className=\"tabs\">\r\n        <button \r\n          className={`tab-button ${activeTab === 'evolution' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('evolution')}\r\n        >\r\n          Performance Evolution\r\n        </button>\r\n        <button \r\n          className={`tab-button ${activeTab === 'overview' ? 'active' : ''}`}\r\n          onClick={() => setActiveTab('overview')}\r\n        >\r\n          Overview\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Empty State */}\r\n      {Object.keys(evolutionData).length === 0 && !loading && (\r\n        <div className=\"section empty-state\">\r\n          <h2 className=\"subtitle\">No Data Available</h2>\r\n          <p>Please upload a benchmark log file to visualize performance data.</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Evolution Tab */}\r\n      {activeTab === 'evolution' && Object.keys(evolutionData).length > 0 && (\r\n        <div>\r\n          <div className=\"section\">\r\n            <h2 className=\"subtitle\">Performance Evolution Over Runs</h2>\r\n            \r\n            {/* Scene selector */}\r\n            <div className=\"selector-container\">\r\n              <label htmlFor=\"scene-select\" className=\"selector-label\">Select Scene:</label>\r\n              <select\r\n                id=\"scene-select\"\r\n                className=\"scene-selector\"\r\n                value={selectedScene}\r\n                onChange={(e) => setSelectedScene(e.target.value)}\r\n              >\r\n                <option value=\"all\">All Scenes</option>\r\n                {Object.keys(evolutionData).map(scene => (\r\n                  <option key={scene} value={scene}>{scene}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            \r\n            {/* Evolution Chart */}\r\n            <div className=\"chart-container\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                {selectedScene === 'all' ? (\r\n                  <LineChart data={evolutionChartData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"run\" />\r\n                    <YAxis domain={[0, 'dataMax + 10']} />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    {Object.keys(evolutionData).map((scene, index) => (\r\n                      <Line \r\n                        key={scene}\r\n                        type=\"monotone\" \r\n                        dataKey={scene} \r\n                        name={scene} \r\n                        stroke={\r\n                          index === 0 ? '#8884d8' : \r\n                          index === 1 ? '#82ca9d' : \r\n                          index === 2 ? '#ffc658' :\r\n                          index === 3 ? '#ff7300' :\r\n                          '#0088FE'\r\n                        } \r\n                      />\r\n                    ))}\r\n                  </LineChart>\r\n                ) : (\r\n                  <LineChart data={evolutionChartData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"run\" />\r\n                    <YAxis domain={[0, 'dataMax + 10']} />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"mean\" name=\"Mean FPS\" stroke=\"#8884d8\" />\r\n                    <Line type=\"monotone\" dataKey=\"median\" name=\"Median FPS\" stroke=\"#82ca9d\" />\r\n                    <Line type=\"monotone\" dataKey=\"min\" name=\"Min FPS\" stroke=\"#ff7300\" strokeDasharray=\"5 5\" />\r\n                    <Line type=\"monotone\" dataKey=\"max\" name=\"Max FPS\" stroke=\"#0088FE\" strokeDasharray=\"3 3\" />\r\n                  </LineChart>\r\n                )}\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Thread Time Comparison Chart for all scenes */}\r\n          {selectedScene === 'all' && sceneAverages.some(scene => scene.hasThreadData) && (\r\n            <div className=\"section mt-4\">\r\n              <h2 className=\"subtitle\">Thread Time Comparison Across Scenes (ms)</h2>\r\n              <div className=\"chart-container\" style={{ height: '450px', marginBottom: '40px' }}>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <BarChart \r\n                    data={prepareThreadComparisonData()}\r\n                    margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\r\n                  >\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip \r\n                          formatter={(value) => value.toFixed(2)} \r\n                    />\r\n                    <Legend wrapperStyle={{ position: 'relative', marginTop: '10px' }} />\r\n                    <Bar dataKey=\"gameThread\" name=\"Game Thread\" fill=\"#8884d8\" />\r\n                    <Bar dataKey=\"renderThread\" name=\"Render Thread\" fill=\"#82ca9d\" />\r\n                    <Bar dataKey=\"gpuTime\" name=\"GPU Time\" fill=\"#ff7300\" />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Additional Performance Metrics if present - Fixed to always show charts when a scene is selected */}\r\n          {selectedScene !== 'all' && evolutionData[selectedScene] && (\r\n            <div className=\"section\">\r\n              <h2 className=\"subtitle\">Performance Metrics for {selectedScene}</h2>\r\n              <div className=\"metrics-grid\">\r\n                {/* Game Thread Time Chart - Fixed */}\r\n                <div className=\"metric-card\">\r\n                  <h3 className=\"metric-title\">Game Thread Time (ms)</h3>\r\n                  <div className=\".chart-container\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <LineChart \r\n                        data={debugChartData(evolutionData[selectedScene].map(run => ({\r\n                          run: `Run ${run.run}`,\r\n                          mean: run.gameThreadMean || 0,\r\n                          median: run.gameThreadMedian || 0,\r\n                          min: run.gameThreadMin || 0,\r\n                          max: run.gameThreadMax || 0\r\n                        })), 'Game Thread')}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"run\" />\r\n                        <YAxis domain={[0, 'dataMax + 5']} />\r\n                        <Tooltip \r\n                          formatter={(value) => value.toFixed(2)} \r\n                          labelFormatter={(label) => `${label}`}\r\n                        />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey=\"mean\" name=\"Mean Time\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                        <Line type=\"monotone\" dataKey=\"median\" name=\"Median Time\" stroke=\"#82ca9d\" />\r\n                        <Line type=\"monotone\" dataKey=\"min\" name=\"Min Time\" stroke=\"#ff7300\" strokeDasharray=\"5 5\" />\r\n                        <Line type=\"monotone\" dataKey=\"max\" name=\"Max Time\" stroke=\"#0088FE\" strokeDasharray=\"3 3\" />\r\n                      </LineChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Render Thread Time Chart - Fixed */}\r\n                <div className=\"metric-card\">\r\n                  <h3 className=\"metric-title\">Render Thread Time (ms)</h3>\r\n                  <div className=\".chart-container\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <LineChart \r\n                        data={debugChartData(evolutionData[selectedScene].map(run => ({\r\n                          run: `Run ${run.run}`,\r\n                          mean: run.renderThreadMean || 0,\r\n                          median: run.renderThreadMedian || 0,\r\n                          min: run.renderThreadMin || 0,\r\n                          max: run.renderThreadMax || 0\r\n                        })), 'Render Thread')}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"run\" />\r\n                        <YAxis domain={[0, 'dataMax + 5']} />\r\n                        <Tooltip \r\n                          formatter={(value) => value.toFixed(2)} \r\n                          labelFormatter={(label) => `${label}`}\r\n                        />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey=\"mean\" name=\"Mean Time\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                        <Line type=\"monotone\" dataKey=\"median\" name=\"Median Time\" stroke=\"#82ca9d\" />\r\n                        <Line type=\"monotone\" dataKey=\"min\" name=\"Min Time\" stroke=\"#ff7300\" strokeDasharray=\"5 5\" />\r\n                        <Line type=\"monotone\" dataKey=\"max\" name=\"Max Time\" stroke=\"#0088FE\" strokeDasharray=\"3 3\" />\r\n                      </LineChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* GPU Time Chart - Fixed */}\r\n                <div className=\"metric-card\">\r\n                  <h3 className=\"metric-title\">GPU Time (ms)</h3>\r\n                  <div className=\"chart-container\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <LineChart \r\n                        data={debugChartData(evolutionData[selectedScene].map(run => ({\r\n                          run: `Run ${run.run}`,\r\n                          mean: run.gpuTimeMean || 0,\r\n                          median: run.gpuTimeMedian || 0,\r\n                          min: run.gpuTimeMin || 0,\r\n                          max: run.gpuTimeMax || 0\r\n                        })), 'GPU Time')}\r\n                      >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"run\" />\r\n                        <YAxis domain={[0, 'dataMax + 5']} />\r\n                        <Tooltip \r\n                          formatter={(value) => value.toFixed(2)} \r\n                          labelFormatter={(label) => `${label}`}\r\n                        />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey=\"mean\" name=\"Mean Time\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n                        <Line type=\"monotone\" dataKey=\"median\" name=\"Median Time\" stroke=\"#82ca9d\" />\r\n                        <Line type=\"monotone\" dataKey=\"min\" name=\"Min Time\" stroke=\"#ff7300\" strokeDasharray=\"5 5\" />\r\n                        <Line type=\"monotone\" dataKey=\"max\" name=\"Max Time\" stroke=\"#0088FE\" strokeDasharray=\"3 3\" />\r\n                      </LineChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Share Dialog */}\r\n          {isSharing && (\r\n          <ShareDialog\r\n            benchmarkData={prepareBenchmarkDataForSharing()}\r\n            onClose={toggleShareDialog}\r\n          />\r\n          )}\r\n\r\n          {/* Evolution Tables */}\r\n          <div className=\"section\">\r\n            <h2 className=\"subtitle\">Performance Metrics Across Runs</h2>\r\n            \r\n            {Object.keys(evolutionData).map(scene => (\r\n              <div key={scene} className=\"scene-metrics\">\r\n                <h3 className=\"scene-title\">{scene}</h3>\r\n                <div className=\"table-container\">\r\n                  <table>\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Metric</th>\r\n                        {evolutionData[scene].map(run => (\r\n                          <th key={run.run}>Run {run.run}</th>\r\n                        ))}\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <tr>\r\n                        <td className=\"metric-name\">Mean FPS</td>\r\n                        {evolutionData[scene].map(run => (\r\n                          <td key={run.run} className=\"metric-value\">{formatFPS(run.mean)}</td>\r\n                        ))}\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"metric-name\">Median FPS</td>\r\n                        {evolutionData[scene].map(run => (\r\n                          <td key={run.run} className=\"metric-value\">{formatFPS(run.median)}</td>\r\n                        ))}\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"metric-name\">Min FPS</td>\r\n                        {evolutionData[scene].map(run => (\r\n                          <td key={run.run} className=\"metric-value bad-fps\">{run.min.toFixed(2)}</td>\r\n                        ))}\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"metric-name\">Max FPS</td>\r\n                        {evolutionData[scene].map(run => (\r\n                          <td key={run.run} className=\"metric-value good-fps\">{run.max.toFixed(2)}</td>\r\n                        ))}\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"metric-name\">Frames &lt; 60 FPS (%)</td>\r\n                        {evolutionData[scene].map(run => (\r\n                          <td key={run.run} className=\"metric-value\">{run.below60.toFixed(1)}%</td>\r\n                        ))}\r\n                      </tr>\r\n                      {evolutionData[scene][0].gameThreadMean !== undefined && (\r\n                        <>\r\n                          <tr>\r\n                            <td className=\"metric-name\">Game Thread (ms)</td>\r\n                            {evolutionData[scene].map(run => (\r\n                              <td key={run.run} className=\"metric-value\">{run.gameThreadMean?.toFixed(2) || 'N/A'}</td>\r\n                            ))}\r\n                          </tr>\r\n                          <tr>\r\n                            <td className=\"metric-name\">Render Thread (ms)</td>\r\n                            {evolutionData[scene].map(run => (\r\n                              <td key={run.run} className=\"metric-value\">{run.renderThreadMean?.toFixed(2) || 'N/A'}</td>\r\n                            ))}\r\n                          </tr>\r\n                          <tr>\r\n                            <td className=\"metric-name\">GPU Time (ms)</td>\r\n                            {evolutionData[scene].map(run => (\r\n                              <td key={run.run} className=\"metric-value\">{run.gpuTimeMean?.toFixed(2) || 'N/A'}</td>\r\n                            ))}\r\n                          </tr>\r\n                        </>\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Overview Tab */}\r\n      {activeTab === 'overview' && Object.keys(evolutionData).length > 0 && (\r\n        <div>\r\n          <div className=\"section\">\r\n            <h2 className=\"subtitle\">Benchmark Summary</h2>\r\n            <div className=\"summary-grid\">\r\n              <div className=\"summary-card\">\r\n                <div className=\"summary-label\">Overall Average FPS</div>\r\n                <div className=\"summary-value\">\r\n                  {(sceneAverages.reduce((sum, scene) => sum + (scene.meanFPS * scene.totalSamples), 0) / \r\n                    sceneAverages.reduce((sum, scene) => sum + scene.totalSamples, 0)).toFixed(2)}\r\n                </div>\r\n                <div className=\"summary-note\">Weighted average across all samples</div>\r\n              </div>\r\n              <div className=\"summary-card\">\r\n                <div className=\"summary-label\">FPS Range</div>\r\n                <div className=\"summary-value\">\r\n                  <span className=\"bad-fps\">\r\n                    {Math.min(...sceneAverages.map(scene => scene.minFPS)).toFixed(2)}\r\n                  </span> - \r\n                  <span className=\"good-fps\">\r\n                    {Math.max(...sceneAverages.map(scene => scene.maxFPS)).toFixed(2)}\r\n                  </span>\r\n                </div>\r\n                <div className=\"summary-note\">Min/max across all scenes and runs</div>\r\n              </div>\r\n              <div className=\"summary-card\">\r\n                <div className=\"summary-label\">Stutter Events</div>\r\n                <div className=\"summary-value bad-fps\">{stutters.length}</div>\r\n                <div className=\"summary-note\">FPS drops below 15 FPS</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"section\">\r\n            <h2 className=\"subtitle\">Performance Metrics by Scene</h2>\r\n            <div className=\"metrics-grid\">\r\n              <div className=\"metric-card\">\r\n                <h3 className=\"metric-title\">Mean FPS Range</h3>\r\n                <div className=\"chart-container\">\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <BarChart data={sceneAverages}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"name\" />\r\n                      <YAxis />\r\n                      <Tooltip />\r\n                      <Legend />\r\n                      <Bar dataKey=\"minMeanFPS\" name=\"Min Mean FPS\" fill=\"#ff7300\" />\r\n                      <Bar dataKey=\"maxMeanFPS\" name=\"Max Mean FPS\" fill=\"#0088FE\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                </div>\r\n              </div>\r\n              \r\n              {sceneAverages.some(scene => scene.hasThreadData) && (\r\n                <>\r\n                  <div className=\"metric-card\">\r\n                    <h3 className=\"metric-title\">Game Thread Time (ms)</h3>\r\n                    <div className=\"chart-container\">\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <BarChart data={sceneAverages}>\r\n                          <CartesianGrid strokeDasharray=\"3 3\" />\r\n                          <XAxis dataKey=\"name\" />\r\n                          <YAxis />\r\n                          <Tooltip />\r\n                          <Legend />\r\n                          <Bar dataKey=\"minGameThreadMean\" name=\"Min Game Thread\" fill=\"#82ca9d\" />\r\n                          <Bar dataKey=\"maxGameThreadMean\" name=\"Max Game Thread\" fill=\"#8884d8\" />\r\n                        </BarChart>\r\n                      </ResponsiveContainer>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"metric-card\">\r\n                    <h3 className=\"metric-title\">Render Thread Time (ms)</h3>\r\n                    <div className=\"chart-container\">\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <BarChart data={sceneAverages}>\r\n                          <CartesianGrid strokeDasharray=\"3 3\" />\r\n                          <XAxis dataKey=\"name\" />\r\n                          <YAxis />\r\n                          <Tooltip />\r\n                          <Legend />\r\n                          <Bar dataKey=\"minRenderThreadMean\" name=\"Min Render Thread\" fill=\"#82ca9d\" />\r\n                          <Bar dataKey=\"maxRenderThreadMean\" name=\"Max Render Thread\" fill=\"#8884d8\" />\r\n                        </BarChart>\r\n                      </ResponsiveContainer>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"metric-card\">\r\n                    <h3 className=\"metric-title\">GPU Time (ms)</h3>\r\n                    <div className=\"chart-container\">\r\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <BarChart data={sceneAverages}>\r\n                          <CartesianGrid strokeDasharray=\"3 3\" />\r\n                          <XAxis dataKey=\"name\" />\r\n                          <YAxis />\r\n                          <Tooltip />\r\n                          <Legend />\r\n                          <Bar dataKey=\"minGpuTimeMean\" name=\"Min GPU Time\" fill=\"#82ca9d\" />\r\n                          <Bar dataKey=\"maxGpuTimeMean\" name=\"Max GPU Time\" fill=\"#8884d8\" />\r\n                        </BarChart>\r\n                      </ResponsiveContainer>\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"section\">\r\n            <h2 className=\"subtitle\">Scene Performance Summary</h2>\r\n            <div className=\"table-container\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Scene</th>\r\n                    <th>Mean FPS</th>\r\n                    <th>Median FPS</th>\r\n                    <th>Min FPS</th>\r\n                    <th>Max FPS</th>\r\n                    <th>Frames &lt; 60 FPS</th>\r\n                    {sceneAverages.some(scene => scene.hasThreadData) && (\r\n                      <>\r\n                        <th>Game Thread (ms)</th>\r\n                        <th>Render Thread (ms)</th>\r\n                        <th>GPU Time (ms)</th>\r\n                      </>\r\n                    )}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {sceneAverages.map((scene, index) => (\r\n                    <tr key={index}>\r\n                      <td>{scene.name}</td>\r\n                      <td>{formatFPS(scene.meanFPS)}</td>\r\n                      <td>{formatFPS(scene.medianFPS)}</td>\r\n                      <td className=\"bad-fps\">{scene.minFPS.toFixed(2)}</td>\r\n                      <td className=\"good-fps\">{scene.maxFPS.toFixed(2)}</td>\r\n                      <td>{scene.below60.toFixed(1)}%</td>\r\n                      {scene.hasThreadData && (\r\n                        <>\r\n                          <td>{scene.gameThreadMean?.toFixed(2) || 'N/A'}</td>\r\n                          <td>{scene.renderThreadMean?.toFixed(2) || 'N/A'}</td>\r\n                          <td>{scene.gpuTimeMean?.toFixed(2) || 'N/A'}</td>\r\n                        </>\r\n                      )}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n          \r\n          {/* Stutter Events */}\r\n          {stutters.length > 0 && (\r\n            <div className=\"section\">\r\n              <h2 className=\"subtitle\">Stutter Events</h2>\r\n              <div className=\"table-container\">\r\n                <table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Timestamp</th>\r\n                      <th>FPS</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {stutters.map((stutter, index) => (\r\n                      <tr key={index} className=\"stutter-row\">\r\n                        <td style={{ whiteSpace: 'normal', wordBreak: 'break-word' }}>\r\n                          {stutter.timestamp.replace(/(\\d{2}):(\\d{2}):(\\d{2})/, '$1:$2:$3 ')}\r\n                        </td>\r\n                        <td className=\"bad-fps\">{stutter.fps.toFixed(2)}</td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BenchmarkAnalyzer;","import React from 'react';\nimport './App.css';\nimport BenchmarkAnalyzer from './BenchmarkAnalyzer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BenchmarkAnalyzer />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}